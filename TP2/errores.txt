ACA ANOTAMOS LOS ERRORES Y CUAL FUE LA SOLUCION.

Clase

    Test 
        Error
        ----
        Causa
        ----
        Solucion

LogServiceTest

    @Test
    void addLogs()
        Se agregaba el doble de elementos
        ----
        list.add(log) repetido
        ----
        Eliminar la linea repetida

    @Test
    void getLogsByUser()
        Crear dos usuarios con el mismo nombre los trata como si fueran distintos, cuando el username
        debe actuar como identificador
        ----
        Metodo equals sin definir en clase User
        ----
        Definir equals y hashcode en User segun name

    @Test
    void hasAllLogsConcurrent()
        Error por querer hacer hashCode de un usuario sin nombre
        ----
        Constructor vacio de clase User no inicializa el campo name
        ----
        Inicializar name como un string vacio para evitar error por NullPointerException

    @Test
    void hasAllLogsConcurrent()
        expected:<100000> but was:<99963>. No se agregan todas las acciones a los logs
        ----
        El metodo addLog y el HashMap logs en LogsService no eran thread-safe
        ----
        solucion 1:
            Declarar el metodo addLog como synchronized y modificar la declaracion de logs de final a volatile.
            Duracion de ejecucion 1 del test: 247 ms
            Duracion de ejecucion 2 del test: 237 ms
            Duracion de ejecucion 3 del test: 291 ms
            Duracion de ejecucion 4 del test: 252 ms
            Duracion de ejecucion 5 del test: 235 ms
            Duracion de ejecucion 6 del test: 266 ms
            Duracion de ejecucion 7 del test: 265 ms
            Duracion de ejecucion 8 del test: 382 ms
            Duracion de ejecucion 9 del test: 242 ms
            Duracion de ejecucion 10 del test: 186 ms
            ----
            Promedio: 260 ms
        solucion 2:
            Declarar logs como un ConcurrentHashMap, y la lista que almacena como Collections.synchronizedList()
            Duracion de ejecucion 1 del test: 145 ms
            Duracion de ejecucion 2 del test: 185 ms
            Duracion de ejecucion 3 del test: 183 ms
            Duracion de ejecucion 4 del test: 209 ms
            Duracion de ejecucion 5 del test: 184 ms
            Duracion de ejecucion 6 del test: 167 ms
            Duracion de ejecucion 7 del test: 282 ms
            Duracion de ejecucion 8 del test: 166 ms
            Duracion de ejecucion 9 del test: 149 ms
            Duracion de ejecucion 10 del test: 181 ms
            ----
            Promedio: 185 ms


    ejcucion solucion1 solucion 2


    UserServiceTest

        @Test
        void testLoginUser()
            No se mantiene la incrementabilidad en los ids de los usuarios en el login
            ----
            En el metodo login se manejaba mal el incremento del id al momento de crear la instancia del nuevo usuario
            ----
                remplazar
                    int lastId = last == null ? 0 : last.getId();
                    lastId = lastId++;
                    User user = new User(name, lastId);
                por
                    int lastId = last == null ? 0 : last.getId();
                    User user = new User(name, lastId + 1);

        @Test
        void testAddNullUser()
            Error al guardar un usuario null en la base de datos
            ----
            No se verifica que el usuario sea distinto de null antes de guardarlo
            ----
            Verificar que el usuario no sea null en User addUser(User user)

            public User addUser(User user) {
                if (user != null)
                {
                    logSvc.addLog("Se agreg√≥ el usuario " + user.getName(), user);
                    return this.repo.save(user);
                }
                else
                    return user;
            }

        @Test
        void testSortedByName()
            El ordenamiento es diferente
            ----
            El metodo getUsers de UserService ordena los usuarios segun su id
            ----
            Modificar el metodo para que los retorne ordenados por name
    
    CurrentUserService

        @Test
        void testGetsDefaultUser()
            El usuario por defecto es null
            ----
            En el metodo getCurrent, esta mal la comparacion por null. Crea un usuario si el actual no es null
            ----
            viejo:

            public User getCurrent() {
                if (current != null) ERROR
                    current = new User();
                return current;
            }

            nuevo:

            public User getCurrent() {
                if (current == null)
                    current = new User();
                return current;
            }

        @Test
        void testCurrentConcurrent()
            Al acceder concurrentemente los distintos hilos no obtenian la misma instancia
            ----
            El metodo getCurrent no era thread-safe
            ----
            Definir el metodo como synchronized

TodoServiceTest

    @Test
     void testCreateTodo()
        El nuevo ToDo no tiene contenido
        ----
        No se asigna el contenido recibido en createNewToDo al momento de crearlo
        ----
        Asignar el campo content al nuevo ToDo

    @Test
     void testTimerDelete()
        Borra los todos con tiempo MENOR al especificado
        ----
        La comparacion estaba al reves
        ----
        Corregir la comparacion